service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    INDEX_NAME: TodoIdIndex
    ATTACHMENT_S3_BUCKET: todobucket-${self:provider.stage}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Create a new todo item'
            description: 'Create a new todo item'
            requestModels:
              'application/json': CreateTodoRequest
          reqValidatorName: onlyBody
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Update a todo item'
            description: 'Update a todo item'
            requestModels:
              'application/json': UpdateTodoRequest
          reqValidatorName: onlyBody
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
custom:
  serverless-offline:
    httpPort: 3000
  documentation:
    api:
      info:
        version: '1.0.0'
        title: udacity
        description: validation
    models:
      - name: CreateTodoRequest
        contentType: 'application/json'
        schema:
          required:
            - name
            - dueDate
          properties:
            name:
              type: string
            dueDate:
              type: string
      - name: UpdateTodoRequest
        contentType: 'application/json'
        schema:
          required:
            - name
            - dueDate
            - done
          properties:
            name:
              type: string
            dueDate:
              type: string
            done:
              type: boolean
resources:
  - ${file(./resources/dynamo-tables.yaml)}
